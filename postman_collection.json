{
	"info": {
		"_postman_id": "25efc727-0997-456f-babb-a3d87a600679",
		"name": "Quarkus Product Management API (with Exception Tests)",
		"description": "Postman Collection for testing the Quarkus Product Management REST APIs, including global exception handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23656771"
	},
	"item": [
		{
			"name": "Products CRUD Operations",
			"item": [
				{
					"name": "Create New Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Smart TV 55 inch\",\n    \"description\": \"4K HDR Smart TV with voice control\",\n    \"price\": 799.99,\n    \"quantity\": 30\n}"
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						},
						"description": "Creates a new product. Expects 201 Created."
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						},
						"description": "Retrieves a list of all products. Expects 200 OK."
					},
					"response": []
				},
				{
					"name": "Get Product by ID (Existing)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"1"
							]
						},
						"description": "Retrieves details of an existing product by ID. (Replace 1 with actual ID from Create). Expects 200 OK."
					},
					"response": []
				},
				{
					"name": "Update Product by ID (Existing)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Smart TV 65 inch\",\n    \"description\": \"Updated 4K HDR Smart TV with enhanced voice control\",\n    \"price\": 999.00,\n    \"quantity\": 25\n}"
						},
						"url": {
							"raw": "http://localhost:8080/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"1"
							]
						},
						"description": "Updates details of an existing product. (Replace 1 with actual ID from Create). Expects 200 OK."
					},
					"response": []
				},
				{
					"name": "Delete Product by ID (Existing)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"1"
							]
						},
						"description": "Deletes an existing product by ID. (Replace 1 with actual ID from Create). Expects 200 OK."
					},
					"response": []
				}
			],
			"description": "Standard Create, Read, Update, Delete operations."
		},
		{
			"name": "Additional Features",
			"item": [
				{
					"name": "Check Stock Availability (Existing Product)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/check-stock/1/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"check-stock",
								"1",
								"10"
							]
						},
						"description": "Checks if 10 units of product ID 1 are available. (Replace 1 with actual ID). Expects 200 OK with boolean body."
					},
					"response": []
				},
				{
					"name": "Get Products Sorted by Price",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/sorted-by-price",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"sorted-by-price"
							]
						},
						"description": "Retrieves all products sorted by price. Expects 200 OK."
					},
					"response": []
				}
			],
			"description": "Requests for stock availability and sorting by price."
		},
		{
			"name": "Exception Handling Tests",
			"item": [
				{
					"name": "Get Product by ID (Not Found)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/99999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"99999"
							]
						},
						"description": "Attempts to retrieve a product with a non-existent ID. Expects 404 Not Found."
					},
					"response": []
				},
				{
					"name": "Update Product by ID (Not Found)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Non Existent Product\",\n    \"description\": \"Description for non-existent product\",\n    \"price\": 100.00,\n    \"quantity\": 10\n}"
						},
						"url": {
							"raw": "http://localhost:8080/products/99999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"99999"
							]
						},
						"description": "Attempts to update a product with a non-existent ID. Expects 404 Not Found."
					},
					"response": []
				},
				{
					"name": "Delete Product by ID (Not Found)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/99999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"99999"
							]
						},
						"description": "Attempts to delete a product with a non-existent ID. Expects 404 Not Found."
					},
					"response": []
				},
				{
					"name": "Check Stock Availability (Product Not Found)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/check-stock/99999/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"check-stock",
								"99999",
								"5"
							]
						},
						"description": "Attempts to check stock for a non-existent product. Expects 404 Not Found."
					},
					"response": []
				},
				{
					"name": "Create Product (Validation Error - Negative Price)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Invalid Product Price\",\n    \"description\": \"Product with a negative price\",\n    \"price\": -10.00,\n    \"quantity\": 10\n}"
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						},
						"description": "Attempts to create a product with a negative price. Expects 400 Bad Request."
					},
					"response": []
				},
				{
					"name": "Update Product (Validation Error - Negative Quantity)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Product Invalid Quantity\",\n    \"description\": \"Updating product with negative quantity\",\n    \"price\": 100.00,\n    \"quantity\": -5\n}"
						},
						"url": {
							"raw": "http://localhost:8080/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"1"
							]
						},
						"description": "Attempts to update an existing product with a negative quantity. (Replace 1 with actual ID). Expects 400 Bad Request."
					},
					"response": []
				}
			],
			"description": "Test cases for ProductNotFoundException (404) and ValidationException (400)."
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}